// @flow
import fs from 'fs';
import _each from 'lodash/each';
/* eslint-disable no-eval */

const targetFile = __dirname + '/stubs.js';
const sourceDir = __dirname + '/../..';

const parameterTypes = {};

export function stubParametersForIdea({ name, variants }) {
  parameterTypes[name] = variants;
}

function eachFile(dir, callback) {
  fs.readdirSync(dir).forEach(file => {
    const path = dir + '/' + file;
    const stat = fs.statSync(path);
    if (stat && stat.isDirectory()) {
      if (path === __dirname) {
        return;
      }
      eachFile(path, callback);
    } else {
      callback(path);
    }
  });
}

function getPatterns(fileName) {
  const content = fs.readFileSync(fileName, 'utf-8');
  const re = /(Given|When|Then)\(('[^']*'|"[^"]*"|`[^`]*`)/g;
  const result = [];
  let matches;
  do {
    matches = re.exec(content);
    if (matches) {
      result.push(eval(matches[2]));
    }
  } while (matches);
  return result;
}

function combine(prefix, strings, variants, callback) {
  if (strings.length === 1) {
    callback(prefix + strings[0]);
    return;
  }
  const [string, ...restStrings] = strings;
  variants.forEach(variant => {
    combine(prefix + string + variant, restStrings, variants, callback);
  });
}

function spawnPatterns(pattern) {
  let result = [pattern];

  _each(parameterTypes, (paramVariants, paramName) => {
    const newResult = [];
    result.forEach(currentPattern => {
      const split = currentPattern.split(`{${paramName}}`);
      if (split.length === 1) {
        newResult.push(currentPattern);
      } else {
        combine('', split, paramVariants, found => newResult.push(found));
      }
    });
    result = newResult;
  });

  return result;
}

function generateStubFile(fileName, expandedPatterns) {
  let content = '// DO NOT EDIT. The file is generated by ./generate.js\nfunction Given() {}\n';
  _each(expandedPatterns, (stubs, original) => {
    content += `\n// ${original}\n`;
    stubs.forEach(stub => {
      content += `Given(${JSON.stringify(stub)});\n`;
    });
  });
  fs.writeFileSync(fileName, content);
}

export function run() {
  const expandedPatterns = {};
  eachFile(sourceDir, fileName => {
    if (!fileName.match(/\.js$/)) {
      return;
    }
    const patterns = getPatterns(fileName);
    patterns.forEach(pattern => {
      const spawned = spawnPatterns(pattern);
      if (spawned.length > 1 || spawned[0] !== pattern) {
        expandedPatterns[pattern] = spawned;
      }
    });
  });
  generateStubFile(targetFile, expandedPatterns);
}
